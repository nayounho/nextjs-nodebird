/**
 * @fileoverview A simple organizer for ordering hooks.
 * @author Romullo @hiukky
 */
'use strict';
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
var DEFAULT_GROUPS = ['useContext', 'useState', 'useEffect'];
module.exports = {
    meta: {
        docs: {
            description: 'A simple organizer for ordering hooks.',
            category: 'Non-matching declaration order.',
            url: 'https://github.com/hiukky/eslint-plugin-hooks/blob/master/docs/rules/sort.md',
            recommended: false,
        },
        fixable: undefined,
        schema: [
            {
                type: 'object',
                properties: {
                    groups: {
                        type: 'array',
                    },
                },
            },
        ],
    },
    create: function (ctx) {
        var options = ctx.options[0];
        var orderHooks = [];
        return {
            /**
             * @function VariableDeclaration
             *
             * @param {INode} node
             */
            VariableDeclaration: function (node) {
                var declaration = node.declarations[0].init;
                if ((declaration === null || declaration === void 0 ? void 0 : declaration.type) === 'CallExpression' &&
                    node.kind === 'const' &&
                    declaration.callee.name) {
                    if (declaration.callee.name.slice(0, 3) === 'use') {
                        orderHooks.push([declaration.callee.name, node]);
                    }
                }
            },
            /**
             * @function Program
             *
             * @param {INode} node
             */
            'Program:exit': function () {
                var groups = (options === null || options === void 0 ? void 0 : options.groups) || DEFAULT_GROUPS;
                var matchingHooks = __spreadArray([], orderHooks).filter(function (hook) {
                    return groups.includes(hook[0]);
                });
                var orderHooksCorrect = __spreadArray([], matchingHooks).sort(function (a, b) { return groups.indexOf(a[0]) - groups.indexOf(b[0]); });
                matchingHooks.filter(function (hook, index) {
                    if (orderHooksCorrect.length > 1 &&
                        orderHooksCorrect[index][0] !== hook[0]) {
                        ctx.report(hook[1], "Non-matching declaration order. " + hook[0] + " comes " + (!index ? 'after' : 'before') + " " + orderHooksCorrect[index][0] + ".");
                    }
                });
            },
        };
    },
};
//# sourceMappingURL=sort.js.map